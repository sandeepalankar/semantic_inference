<launch>

    <!-- Start_manager required if used stand-alone -->
    <arg name="start_manager" default="true" doc="Start a separate nodelet manager"/>
    <arg name="nodelet_manager" default="nodelet_manager" doc="Name of nodelet manager"/>
    <!-- Launch file features -->
    <arg name="debug" default="false" doc="Run segmentation with gdb"/>
    <arg name="launch-prefix" default="$(eval 'gdb -ex run --args' if debug else '')" doc="Launch prefix for nodelet manager"/>
    <arg name="verbose" default="true" doc="Set segmentation log output to stdout"/>
    <arg name="use_prerecorded_semantics" default="false" doc="Remap prerecorded labels instead of running inference"/>
    <arg name="force_rebuild" default="false" doc="Force TensorRT to rebuild engine file"/>
    <!-- Input configuration -->
    <arg name="compressed_rgb" default="false" doc="Triggers decompression for RGB stream"/> 
    <arg name="rgb_image_transport" default="$(eval 'compressed' if compressed_rgb else 'raw')" doc="Input image transport type"/>
    <arg name="max_image_queue_size" default="1" doc="Max number of images to store"/>
    <arg name="min_separation_s" default="0.0" doc="Enforced separation between input images"/>
    <arg name="rotation_type" default="none" doc="Input camera rotation"/>

    <!-- segmentation model options. Make sure you have one downloaded -->
    <!--<arg name="model_name" default="mobilenetv2_360_640"/>-->
    <!--<arg name="model_name" default="hrnetv2_360_640_v12"/>-->
    <!--<arg name="model_name" default="efficientvit_seg_l2"/>-->
    <!--<arg name="model_name" default="ade20k-hrnetv2-c1"/>-->
    <!--<arg name="model_name" default="ade20k-mobilnetv2dilated-c1_deepsup"/>-->
    <arg name="model_name" default="ade20k-efficientvit_seg_l2" doc="Model name to use"/>

    <!-- Colormap and label grouping -->
    <arg name="labelspace_name" default="ade20k_indoor" doc="Label remapping configuration"/> <!-- ade20k_outdoor" -->
    <arg name="colormap_path" default="$(find semantic_inference)/config/distinct_150_colors.csv" doc="Visualization colormap"/>

    <!-- Nodelet manager -->
    <group if="$(arg start_manager)">
        <node pkg="nodelet" type="nodelet" name="$(arg nodelet_manager)"
              args="manager"
              launch-prefix="$(arg launch-prefix)"
              output="$(eval 'screen' if verbose else 'log')"
              required="true">
          <param name="image_transport" value="$(arg rgb_image_transport)"/>
        </node>
    </group>

    <!-- 2D semantic segmentation -->
    <group unless="$(arg use_prerecorded_semantics)">
        <node pkg="nodelet" type="nodelet" name="semantic_inference"
              args="load semantic_inference/segmentation $(arg nodelet_manager) --no-bond"
              output="$(eval 'screen' if verbose else 'log')"
              required="true">

            <remap from="output/image_raw" to="/semantic_inference/semantic/image_raw"/>

            <rosparam command="load" file="$(find semantic_inference)/config/models/$(arg model_name).yaml"/>
            <rosparam command="load" file="$(find semantic_inference)/config/label_groupings/ade20k_indoor.yaml" ns="output/recolor"/> <!-- ade20k_outdoor" -->
            <param name="segmenter/model/model_file" value="$(find semantic_inference)/models/$(arg model_name).onnx"/>
            <param name="segmenter/model/engine_file" value="$(find semantic_inference)/engines/$(arg model_name).trt"/>
            <param name="segmenter/model/force_rebuild" value="$(arg force_rebuild)"/>
            <param name="output/recolor/colormap_path" value="$(arg colormap_path)"/>
            <param name="worker/max_queue_size" value="$(arg max_image_queue_size)"/>
            <param name="worker/image_separation_s" value="$(arg min_separation_s)"/>
            <param name="image_rotator/rotation" value="$(arg rotation_type)"/>
        </node>
    </group>

    <!-- Reampping for pre-recorded labels -->
    <group if="$(arg use_prerecorded_semantics)">
        <node pkg="nodelet" type="nodelet" name="semantic_inference"
              args="load semantic_inference/recolor $(arg nodelet_manager) --no-bond"
              output="$(eval 'screen' if verbose else 'log')"
              required="true">
            <rosparam command="load" file="$(find semantic_inference)/config/label_groupings/$(arg labelspace_name).yaml" ns="output/recolor"/>
            <param name="worker/max_queue_size" value="$(arg max_image_queue_size)"/>
            <param name="worker/image_separation_s" value="$(arg min_separation_s)"/>
        </node>
    </group>

</launch>